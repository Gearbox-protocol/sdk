export const crossChainMultisigAbi = [
  {
    type: "constructor",
    inputs: [
      { name: "signers_", internalType: "address[]", type: "address[]" },
      { name: "confirmationThreshold_", internalType: "uint8", type: "uint8" },
      { name: "owner_", internalType: "address", type: "address" },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "BATCH_TYPEHASH",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "COMPACT_BATCH_TYPEHASH",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "CROSS_CHAIN_CALL_TYPEHASH",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "RECOVERY_MODE_TYPEHASH",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "signer", internalType: "address", type: "address" }],
    name: "addSigner",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "name", internalType: "string", type: "string" },
      {
        name: "calls",
        internalType: "struct CrossChainCall[]",
        type: "tuple[]",
        components: [
          { name: "chainId", internalType: "uint256", type: "uint256" },
          { name: "target", internalType: "address", type: "address" },
          { name: "callData", internalType: "bytes", type: "bytes" },
        ],
      },
      { name: "prevHash", internalType: "bytes32", type: "bytes32" },
    ],
    name: "computeBatchHash",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "pure",
  },
  {
    type: "function",
    inputs: [
      { name: "name", internalType: "string", type: "string" },
      { name: "batchHash", internalType: "bytes32", type: "bytes32" },
      { name: "prevHash", internalType: "bytes32", type: "bytes32" },
    ],
    name: "computeCompactBatchHash",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "pure",
  },
  {
    type: "function",
    inputs: [
      {
        name: "call",
        internalType: "struct CrossChainCall",
        type: "tuple",
        components: [
          { name: "chainId", internalType: "uint256", type: "uint256" },
          { name: "target", internalType: "address", type: "address" },
          { name: "callData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "computeCrossChainCallHash",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "pure",
  },
  {
    type: "function",
    inputs: [
      { name: "chainId", internalType: "uint256", type: "uint256" },
      { name: "startingBatchHash", internalType: "bytes32", type: "bytes32" },
    ],
    name: "computeRecoveryModeHash",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "pure",
  },
  {
    type: "function",
    inputs: [],
    name: "confirmationThreshold",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "contractType",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "chainId", internalType: "uint256", type: "uint256" }],
    name: "disableRecoveryMode",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "domainSeparatorV4",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "eip712Domain",
    outputs: [
      { name: "fields", internalType: "bytes1", type: "bytes1" },
      { name: "name", internalType: "string", type: "string" },
      { name: "version", internalType: "string", type: "string" },
      { name: "chainId", internalType: "uint256", type: "uint256" },
      { name: "verifyingContract", internalType: "address", type: "address" },
      { name: "salt", internalType: "bytes32", type: "bytes32" },
      { name: "extensions", internalType: "uint256[]", type: "uint256[]" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      {
        name: "message",
        internalType: "struct SignedRecoveryModeMessage",
        type: "tuple",
        components: [
          { name: "chainId", internalType: "uint256", type: "uint256" },
          {
            name: "startingBatchHash",
            internalType: "bytes32",
            type: "bytes32",
          },
          { name: "signatures", internalType: "bytes[]", type: "bytes[]" },
        ],
      },
    ],
    name: "enableRecoveryMode",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "signedBatch",
        internalType: "struct SignedBatch",
        type: "tuple",
        components: [
          { name: "name", internalType: "string", type: "string" },
          { name: "prevHash", internalType: "bytes32", type: "bytes32" },
          {
            name: "calls",
            internalType: "struct CrossChainCall[]",
            type: "tuple[]",
            components: [
              { name: "chainId", internalType: "uint256", type: "uint256" },
              { name: "target", internalType: "address", type: "address" },
              { name: "callData", internalType: "bytes", type: "bytes" },
            ],
          },
          { name: "signatures", internalType: "bytes[]", type: "bytes[]" },
        ],
      },
    ],
    name: "executeBatch",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "batchHash", internalType: "bytes32", type: "bytes32" }],
    name: "getBatch",
    outputs: [
      {
        name: "result",
        internalType: "struct SignedBatch",
        type: "tuple",
        components: [
          { name: "name", internalType: "string", type: "string" },
          { name: "prevHash", internalType: "bytes32", type: "bytes32" },
          {
            name: "calls",
            internalType: "struct CrossChainCall[]",
            type: "tuple[]",
            components: [
              { name: "chainId", internalType: "uint256", type: "uint256" },
              { name: "target", internalType: "address", type: "address" },
              { name: "callData", internalType: "bytes", type: "bytes" },
            ],
          },
          { name: "signatures", internalType: "bytes[]", type: "bytes[]" },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "batchHash", internalType: "bytes32", type: "bytes32" }],
    name: "getConnectedBatchHashes",
    outputs: [{ name: "", internalType: "bytes32[]", type: "bytes32[]" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getCurrentBatchHashes",
    outputs: [{ name: "", internalType: "bytes32[]", type: "bytes32[]" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getExecutedBatchHashes",
    outputs: [{ name: "", internalType: "bytes32[]", type: "bytes32[]" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "getSigners",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "isRecoveryModeEnabled",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "isSigner",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "lastBatchHash",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "signer", internalType: "address", type: "address" }],
    name: "removeSigner",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      {
        name: "newConfirmationThreshold",
        internalType: "uint8",
        type: "uint8",
      },
    ],
    name: "setConfirmationThreshold",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "batchHash", internalType: "bytes32", type: "bytes32" },
      { name: "signature", internalType: "bytes", type: "bytes" },
    ],
    name: "signBatch",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "name", internalType: "string", type: "string" },
      {
        name: "calls",
        internalType: "struct CrossChainCall[]",
        type: "tuple[]",
        components: [
          { name: "chainId", internalType: "uint256", type: "uint256" },
          { name: "target", internalType: "address", type: "address" },
          { name: "callData", internalType: "bytes", type: "bytes" },
        ],
      },
      { name: "prevHash", internalType: "bytes32", type: "bytes32" },
    ],
    name: "submitBatch",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "signer",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "AddSigner",
  },
  { type: "event", anonymous: false, inputs: [], name: "DisableRecoveryMode" },
  { type: "event", anonymous: false, inputs: [], name: "EIP712DomainChanged" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "startingBatchHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "EnableRecoveryMode",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "batchHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "ExecuteBatch",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "signer",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RemoveSigner",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "newConfirmationThreshold",
        internalType: "uint8",
        type: "uint8",
        indexed: false,
      },
    ],
    name: "SetConfirmationThreshold",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "batchHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "signer",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "SignBatch",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "batchHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "SubmitBatch",
  },
  {
    type: "error",
    inputs: [{ name: "batchHash", internalType: "bytes32", type: "bytes32" }],
    name: "BatchIsNotSubmittedException",
  },
  {
    type: "error",
    inputs: [{ name: "caller", internalType: "address", type: "address" }],
    name: "CallerIsNotSelfException",
  },
  { type: "error", inputs: [], name: "CantBeExecutedOnCurrentChainException" },
  {
    type: "error",
    inputs: [{ name: "signer", internalType: "address", type: "address" }],
    name: "DuplicateSignatureException",
  },
  {
    type: "error",
    inputs: [],
    name: "InsufficientNumberOfSignaturesException",
  },
  { type: "error", inputs: [], name: "InvalidBatchException" },
  { type: "error", inputs: [], name: "InvalidConfirmationThresholdException" },
  { type: "error", inputs: [], name: "InvalidPrevHashException" },
  { type: "error", inputs: [], name: "InvalidRecoveryModeMessageException" },
  { type: "error", inputs: [], name: "InvalidShortString" },
  { type: "error", inputs: [], name: "InvalidSignerAddressException" },
  {
    type: "error",
    inputs: [{ name: "signer", internalType: "address", type: "address" }],
    name: "SignerIsAlreadyApprovedException",
  },
  {
    type: "error",
    inputs: [{ name: "signer", internalType: "address", type: "address" }],
    name: "SignerIsNotApprovedException",
  },
  {
    type: "error",
    inputs: [{ name: "str", internalType: "string", type: "string" }],
    name: "StringTooLong",
  },
] as const;
